package com.app.rxjava.greendaoproject.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.rxjava.greendaoproject.model.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, Integer.class, "age", false, "AGE");
        public final static Property StudyCode = new Property(3, Integer.class, "studyCode", false, "STUDY_CODE");
        public final static Property Sex = new Property(4, Integer.class, "sex", false, "SEX");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property Ext = new Property(6, String.class, "ext", false, "EXT");
        public final static Property Ext2 = new Property(7, String.class, "ext2", false, "EXT2");
        public final static Property Ext3 = new Property(8, String.class, "ext3", false, "EXT3");
        public final static Property Ext4 = new Property(9, String.class, "ext4", false, "EXT4");
        public final static Property Ext5 = new Property(10, String.class, "ext5", false, "EXT5");
        public final static Property Ext6 = new Property(11, String.class, "ext6", false, "EXT6");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"AGE\" INTEGER," + // 2: age
                "\"STUDY_CODE\" INTEGER," + // 3: studyCode
                "\"SEX\" INTEGER," + // 4: sex
                "\"CITY\" TEXT," + // 5: city
                "\"EXT\" TEXT," + // 6: ext
                "\"EXT2\" TEXT," + // 7: ext2
                "\"EXT3\" TEXT," + // 8: ext3
                "\"EXT4\" TEXT," + // 9: ext4
                "\"EXT5\" TEXT," + // 10: ext5
                "\"EXT6\" TEXT);"); // 11: ext6
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        Integer studyCode = entity.getStudyCode();
        if (studyCode != null) {
            stmt.bindLong(4, studyCode);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(5, sex);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(7, ext);
        }
 
        String ext2 = entity.getExt2();
        if (ext2 != null) {
            stmt.bindString(8, ext2);
        }
 
        String ext3 = entity.getExt3();
        if (ext3 != null) {
            stmt.bindString(9, ext3);
        }
 
        String ext4 = entity.getExt4();
        if (ext4 != null) {
            stmt.bindString(10, ext4);
        }
 
        String ext5 = entity.getExt5();
        if (ext5 != null) {
            stmt.bindString(11, ext5);
        }
 
        String ext6 = entity.getExt6();
        if (ext6 != null) {
            stmt.bindString(12, ext6);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        Integer studyCode = entity.getStudyCode();
        if (studyCode != null) {
            stmt.bindLong(4, studyCode);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(5, sex);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(7, ext);
        }
 
        String ext2 = entity.getExt2();
        if (ext2 != null) {
            stmt.bindString(8, ext2);
        }
 
        String ext3 = entity.getExt3();
        if (ext3 != null) {
            stmt.bindString(9, ext3);
        }
 
        String ext4 = entity.getExt4();
        if (ext4 != null) {
            stmt.bindString(10, ext4);
        }
 
        String ext5 = entity.getExt5();
        if (ext5 != null) {
            stmt.bindString(11, ext5);
        }
 
        String ext6 = entity.getExt6();
        if (ext6 != null) {
            stmt.bindString(12, ext6);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // studyCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ext
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ext2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ext3
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ext4
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ext5
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // ext6
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStudyCode(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExt2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExt3(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExt4(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExt5(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExt6(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
